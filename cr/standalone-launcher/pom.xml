<?xml version="1.0"?>
<!--
/*
 * Copyright 2011 Outerthought bvba
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>org.lilyproject</groupId>
  <artifactId>lily-standalone-launcher</artifactId>
  <name>Lily: standalone lily launcher (for testing)</name>

  <parent>
    <groupId>org.lilyproject</groupId>
    <artifactId>lily</artifactId>
    <version>2.6.1</version>
    <relativePath>../..</relativePath>
  </parent>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-classloader</id>
            <phase>compile</phase>
            <configuration>
              <tasks>
                <!--
                    Copy the classloader XML file, for which we rely on the lily-server-test-fw project
                    to generate it for us.
                -->
                <property name="classLoaderXmlLocation" value="${basedir}/../server-test-fw/target/classloader-for-use-by-launcher.xml" />
                <available property="classLoaderXmlAvailable" file="${classLoaderXmlLocation}" />
                <fail unless="classLoaderXmlAvailable" message="File not available: ${classLoaderXmlLocation}" />

                <property name="targetDir" value="target/classes/org/lilyproject/lilyservertestfwloader" />
                <mkdir dir="${targetDir}" />
                <copy file="${classLoaderXmlLocation}" tofile="${targetDir}/classloader.xml" />
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.lilyproject</groupId>
        <artifactId>lily-genscript-plugin</artifactId>
        <configuration>
          <scripts>
            <script>
              <basename>launch-test-lily</basename>
              <mainClass>org.lilyproject.lilyservertestfwloader.ClassLoadingLilyLauncher</mainClass>
            </script>
          </scripts>
          <!-- Here we are extracting various webapps because otherwise jetty doesn't seem to be able to correctly resolve the location of the web.xml -->
          <beforeJavaHook>
            <parameter>
              <platform>unix</platform>
              <mode>dev</mode>
              <value><![CDATA[
WEBAPPSDIR=${basedir}/target/hadoopwebapps
mkdir -p $WEBAPPSDIR
CWD=`pwd`
cd $WEBAPPSDIR
$JAVA_HOME/bin/jar xf ${settings.localRepository}/org/apache/hadoop/hadoop-core/${version.hadoop.mr1}/hadoop-core-${version.hadoop.mr1}.jar webapps
$JAVA_HOME/bin/jar xf ${settings.localRepository}/org/apache/hadoop/hadoop-hdfs/${version.hadoop}/hadoop-hdfs-${version.hadoop}-tests.jar webapps
$JAVA_HOME/bin/jar xf ${settings.localRepository}/org/apache/hbase/hbase/${version.hbase}/hbase-${version.hbase}.jar hbase-webapps
cd $CWD

# Enable JMX access on the same port as used by HBase's region server
# This is handy because some of our test tools can read out HBase metrics this way
LILY_JMX_OPTIONS="-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10102"
LILY_OPTIONS="$LILY_JAVA_OPTIONS $LILY_JMX_OPTIONS -Dlilyruntime.cacheclassloaders=true"

# User can specify an alternate conf dir using TEST_LILY_CONF_DIR
if [ -z "$TEST_LILY_CONF_DIR" ] ; then
  TEST_LILY_CONF_DIR="${basedir}/../../cr/process/server/conf"
fi

# Default plugin dir
if [ -z "$LILY_PLUGIN_DIR" ]; then
  LILY_PLUGIN_DIR="${basedir}/../../cr/process/server/plugins"
fi

if [[ "$@" == *-solrcloud* ]] ; then
  # This is a dirty trick to make the SolrCloud admin ui work when the user specifies -solrcloud
  # For the reason why, see Solr source code: cloud_args in app.js and SystemInfoHandler.java
  LILY_OPTIONS="$LILY_OPTIONS -DzkHoax"
fi
              ]]></value>
            </parameter>
            <parameter>
              <platform>unix</platform>
              <mode>dist</mode>
              <value><![CDATA[
WEBAPPSDIR=$LILY_HOME/tmp/hadoopwebapps
mkdir -p $WEBAPPSDIR
CWD=`pwd`
cd $WEBAPPSDIR
$JAVA_HOME/bin/jar xf $M2_REPO/org/apache/hadoop/hadoop-core/${version.hadoop.mr1}/hadoop-core-${version.hadoop.mr1}.jar webapps
$JAVA_HOME/bin/jar xf $M2_REPO/org/apache/hadoop/hadoop-hdfs/${version.hadoop}/hadoop-hdfs-${version.hadoop}-tests.jar webapps
$JAVA_HOME/bin/jar xf $M2_REPO/org/apache/hbase/hbase/${version.hbase}/hbase-${version.hbase}.jar hbase-webapps
cd $CWD

# Enable JMX access on the same port as used by HBase's region server
# This is handy because some of our test tools can read out HBase metrics this way
LILY_JMX_OPTIONS="-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10102"
LILY_OPTIONS="$LILY_JAVA_OPTIONS $LILY_JMX_OPTIONS -Dlilyruntime.cacheclassloaders=true"

# User can specify an alternate conf dir using TEST_LILY_CONF_DIR
if [ -z "$TEST_LILY_CONF_DIR" ] ; then
  TEST_LILY_CONF_DIR="$LILY_HOME/conf"
fi

# Default plugin dir
if [ -z "$LILY_PLUGIN_DIR" ]; then
  LILY_PLUGIN_DIR="$LILY_HOME/plugins"
fi

if [[ "$@" == *-solrcloud* ]] ; then
  # This is a dirty trick to make the SolrCloud admin ui work when the user specifies -solrcloud
  # For the reason why, see Solr source code: cloud_args in app.js and SystemInfoHandler.java
  LILY_OPTIONS="$LILY_OPTIONS -DzkHoax"
fi
              ]]></value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dev</mode>
              <value><![CDATA[
set WEBAPPSDIR=${basedir}\target\hadoopwebapps
mkdir %WEBAPPSDIR%
set CWD=%CD%
cd %WEBAPPSDIR%
"%JAVA_HOME%\bin\jar" xf ${settings.localRepository}\org\apache\hadoop\hadoop-core\${version.hadoop.mr1}\hadoop-core-${version.hadoop.mr1}.jar webapps
"%JAVA_HOME%\bin\jar" xf ${settings.localRepository}\org\apache\hadoop\hadoop-hdfs\${version.hadoop}\hadoop-hdfs-${version.hadoop}-tests.jar webapps
"%JAVA_HOME%\bin\jar" xf ${settings.localRepository}\org\apache\hbase\hbase\${version.hbase}\hbase-${version.hbase}.jar hbase-webapps
chdir /d %CWD%

rem Enable JMX access on the same port as used by HBase's region server
rem This is handy because some of our test tools can read out HBase metrics this way
set LILY_JMX_OPTIONS=-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10102
set LILY_OPTIONS=%LILY_JAVA_OPTIONS% %LILY_JMX_OPTIONS% -Dlilyruntime.cacheclassloaders=true
              ]]></value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dist</mode>
              <value><![CDATA[
set WEBAPPSDIR=%LILY_HOME%\tmp\hadoopwebapps
mkdir %WEBAPPSDIR%
set CWD=%CD%
cd %WEBAPPSDIR%
"%JAVA_HOME%\bin\jar" xf %M2_REPO%\org\apache\hadoop\hadoop-core\${version.hadoop.mr1}\hadoop-core-${version.hadoop.mr1}.jar webapps
"%JAVA_HOME%\bin\jar" xf %M2_REPO%\org\apache\hadoop\hadoop-hfds\${version.hadoop}\hadoop-hfds-${version.hadoop}-tests.jar webapps
"%JAVA_HOME%\bin\jar" xf %M2_REPO%\org\apache\hbase\hbase\${version.hbase}\hbase-${version.hbase}.jar hbase-webapps
chdir /d %CWD%

rem Enable JMX access on the same port as used by HBase's region server
rem This is handy because some of our test tools can read out HBase metrics this way
set LILY_JMX_OPTIONS=-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10102
set LILY_OPTIONS=%LILY_JAVA_OPTIONS% %LILY_JMX_OPTIONS% -Dlilyruntime.cacheclassloaders=true
              ]]></value>
            </parameter>
          </beforeJavaHook>
          <classPathPrefix>
            <parameter>
              <platform>unix</platform>
              <mode>dev</mode>
              <value>${basedir}/target/hadoopwebapps:</value>
            </parameter>
            <parameter>
              <platform>unix</platform>
              <mode>dist</mode>
              <value>$LILY_HOME/tmp/hadoopwebapps:</value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dev</mode>
              <value>${basedir}\target\hadoopwebapps;</value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dist</mode>
              <value>%LILY_HOME%\tmp\hadoopwebapps;</value>
            </parameter>
          </classPathPrefix>
          <defaultJvmArgs>
            <parameter>
              <platform>unix</platform>
              <mode>dist</mode>
              <value>-XX:MaxPermSize=128m -Dlily.conf.dir=$TEST_LILY_CONF_DIR -Dlily.plugin.dir=$LILY_PLUGIN_DIR -Dlily.testlauncher.repository=$M2_REPO -Dsolr.war=$M2_REPO/org/apache/solr/solr/${version.solr}/solr-${version.solr}.war</value>
            </parameter>
            <parameter>
              <platform>unix</platform>
              <mode>dev</mode>
              <value>-XX:MaxPermSize=128m -Dlily.conf.dir=$TEST_LILY_CONF_DIR -Dlily.plugin.dir=$LILY_PLUGIN_DIR</value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dist</mode>
              <value>-XX:MaxPermSize=128m -Dlily.conf.dir=%LILY_HOME%\conf -Dlily.plugin.dir=%LILY_HOME%\plugins -Dlily.testlauncher.repository=%M2_REPO% -Dsolr.war=%M2_REPO%\org\apache\solr\solr\${version.solr}\solr-${version.solr}.war</value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dev</mode>
              <value>-XX:MaxPermSize=128m -Dlily.plugin.dir=${basedir}\..\..\cr\process\server\conf -Dlily.plugin.dir=${basedir}\..\..\cr\process\server\plugins</value>
            </parameter>
          </defaultJvmArgs>
        </configuration>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>genscript</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <dependencies>
    <!--
      This dependency is here only to get the build order right. Since it's in test scope,
      it won't be included in the classpath. -->
    <dependency>
      <groupId>org.lilyproject</groupId>
      <artifactId>lily-server-test-fw</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>
  </dependencies>

</project>
