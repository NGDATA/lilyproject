<?xml version="1.0"?>
<!--
/*
 * Copyright 2011 Outerthought bvba
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>org.lilyproject</groupId>
  <artifactId>lily-server-test-fw-loader</artifactId>
  <name>Lily-server: test framework</name>

  <parent>
    <groupId>org.lilyproject</groupId>
    <artifactId>lily</artifactId>
    <version>1.1-RC1</version>
    <relativePath>../..</relativePath>
  </parent>
  
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-classloader</id>
            <phase>compile</phase>
            <configuration>
              <tasks>
                <!--
                    Copy the classloader XML file, for which we rely on the lily-server-test-fw project
                    to generate it for us.
                -->
                <property name="classLoaderXmlLocation" value="${basedir}/../lily-server-test-fw/target/classloader-for-use-by-launcher.xml" />
                <available property="classLoaderXmlAvailable" file="${classLoaderXmlLocation}" />
                <fail unless="classLoaderXmlAvailable" message="File not available: ${classLoaderXmlLocation}" />

                <property name="targetDir" value="target/classes/org/lilyproject/lilyservertestfwloader" />
                <mkdir dir="${targetDir}" />
                <copy file="${classLoaderXmlLocation}" tofile="${targetDir}/classloader.xml" />
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>

          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <tasks>
                <mkdir dir="${basedir}/target/classes/org/lilyproject/lilyservertestfwloader/" />
                <echo file="${basedir}/target/classes/org/lilyproject/lilyservertestfwloader/kauri.properties" encoding="utf8">kauri.version=${version.kauri}</echo>
              </tasks>
            </configuration>
          </execution>
        </executions>
      </plugin>
 
       <plugin>
        <groupId>org.lilyproject</groupId>
        <artifactId>lily-genscript-plugin</artifactId>
        <configuration>
          <scripts>
            <script>
              <basename>launch-test-lily</basename>
              <mainClass>org.lilyproject.lilyservertestfwloader.ClassLoadingLilyLauncher</mainClass>
            </script>
          </scripts>
          <beforeJavaHook>
            <parameter>
              <platform>unix</platform>
              <mode>dev</mode>
              <value>
WEBAPPSDIR=${basedir}/target/hadoopwebapps
mkdir -p $WEBAPPSDIR
CWD=`pwd`
cd $WEBAPPSDIR
$JAVA_HOME/bin/jar xf ${settings.localRepository}/org/apache/hadoop/hadoop-core/${version.hadoop}/hadoop-core-${version.hadoop}.jar webapps
$JAVA_HOME/bin/jar xf ${settings.localRepository}/org/apache/hbase/hbase/${version.hbase}/hbase-${version.hbase}.jar hbase-webapps
cd $CWD

# Enable JMX access on the same port as used by HBase's region server
# This is handy because some of our test tools can read out HBase metrics this way
LILY_JMX_OPTIONS="-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10102"
LILY_OPTIONS="$LILY_JAVA_OPTIONS $LILY_JMX_OPTIONS"
              </value>
            </parameter>
            <parameter>
              <platform>unix</platform>
              <mode>dist</mode>
              <value>
WEBAPPSDIR=$LILY_HOME/tmp/hadoopwebapps
mkdir -p $WEBAPPSDIR
CWD=`pwd`
cd $WEBAPPSDIR
$JAVA_HOME/bin/jar xf $M2_REPO/org/apache/hadoop/hadoop-core/${version.hadoop}/hadoop-core-${version.hadoop}.jar webapps
$JAVA_HOME/bin/jar xf $M2_REPO/org/apache/hbase/hbase/${version.hbase}/hbase-${version.hbase}.jar hbase-webapps
cd $CWD

# Enable JMX access on the same port as used by HBase's region server
# This is handy because some of our test tools can read out HBase metrics this way
LILY_JMX_OPTIONS="-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10102"
LILY_OPTIONS="$LILY_JAVA_OPTIONS $LILY_JMX_OPTIONS"
              </value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dev</mode>
              <value>
set WEBAPPSDIR=${basedir}\target\hadoopwebapps
mkdir %WEBAPPSDIR%
set CWD=%CD%
cd %WEBAPPSDIR%
"%JAVA_HOME%\bin\jar" xf ${settings.localRepository}\org\apache\hadoop\hadoop-core\${version.hadoop}\hadoop-core-${version.hadoop}.jar webapps
"%JAVA_HOME%\bin\jar" xf ${settings.localRepository}\org\apache\hbase\hbase\${version.hbase}\hbase-${version.hbase}.jar hbase-webapps
chdir /d %CWD%

rem Enable JMX access on the same port as used by HBase's region server
rem This is handy because some of our test tools can read out HBase metrics this way
set LILY_JMX_OPTIONS=-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10102
set LILY_OPTIONS=%LILY_JAVA_OPTIONS% %LILY_JMX_OPTIONS%
              </value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dist</mode>
              <value>
set WEBAPPSDIR=%LILY_HOME%\tmp\hadoopwebapps
mkdir %WEBAPPSDIR%
set CWD=%CD%
cd %WEBAPPSDIR%
"%JAVA_HOME%\bin\jar" xf %M2_REPO%\org\apache\hadoop\hadoop-core\${version.hadoop}\hadoop-core-${version.hadoop}.jar webapps
"%JAVA_HOME%\bin\jar" xf %M2_REPO%\org\apache\hbase\hbase\${version.hbase}\hbase-${version.hbase}.jar hbase-webapps
chdir /d %CWD%

rem Enable JMX access on the same port as used by HBase's region server
rem This is handy because some of our test tools can read out HBase metrics this way
set LILY_JMX_OPTIONS=-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10102
set LILY_OPTIONS=%LILY_JAVA_OPTIONS% %LILY_JMX_OPTIONS%
              </value>
            </parameter>
          </beforeJavaHook>
          <classPathPrefix>
            <parameter>
              <platform>unix</platform>
              <mode>dev</mode>
              <value>${basedir}/target/hadoopwebapps:</value>
            </parameter>
            <parameter>
              <platform>unix</platform>
              <mode>dist</mode>
              <value>$LILY_HOME/tmp/hadoopwebapps:</value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dev</mode>
              <value>${basedir}\target\hadoopwebapps;</value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dist</mode>
              <value>%LILY_HOME%\tmp\hadoopwebapps;</value>
            </parameter>
          </classPathPrefix>
          <defaultJvmArgs>
            <parameter>
              <platform>unix</platform>
              <mode>dist</mode>
              <value>-Dlily.conf.dir=$LILY_HOME/conf -Dlily.plugin.dir=$LILY_HOME/plugins -Dlily.testlauncher.repository=$M2_REPO -Dsolr.war=$M2_REPO/org/apache/solr/solr-webapp/${version.solr}/solr-webapp-${version.solr}.war</value>
            </parameter>
            <parameter>
              <platform>unix</platform>
              <mode>dev</mode>
              <value>-Dlily.conf.dir=${basedir}/../../cr/process/server/conf -Dlily.plugin.dir=${basedir}/../../cr/process/server/plugins</value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dist</mode>
              <value>-Dlily.conf.dir=%LILY_HOME%\conf -Dlily.plugin.dir=%LILY_HOME%\plugins -Dlily.testlauncher.repository=%M2_REPO% -Dsolr.war=%M2_REPO%\org\apache\solr\solr-webapp\${version.solr}\solr-webapp-${version.solr}.war</value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dev</mode>
              <value>-Dlily.plugin.dir=${basedir}\..\..\cr\process\server\conf -Dlily.plugin.dir=${basedir}\..\..\cr\process\server\plugins</value>
            </parameter>
          </defaultJvmArgs>
        </configuration>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>genscript</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
    
  <dependencies>
    <dependency>
      <groupId>org.lilyproject</groupId>
      <artifactId>lily-server-test-fw</artifactId>
    </dependency>
    
  </dependencies>
</project>
