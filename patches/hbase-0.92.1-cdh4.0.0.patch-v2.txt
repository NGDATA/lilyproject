diff --git pom.xml pom.xml
index 66341ad..c753f9c 100644
--- pom.xml
+++ pom.xml
@@ -35,7 +35,7 @@
   <groupId>org.apache.hbase</groupId>
   <artifactId>hbase</artifactId>
   <packaging>jar</packaging>
-  <version>0.92.1-cdh4.0.0</version>
+  <version>0.92.1-cdh4.0.0-lily-v2</version>
   <name>HBase</name>
   <description>
     HBase is the &amp;lt;a href="http://hadoop.apache.org"&amp;rt;Hadoop&lt;/a&amp;rt; database. Use it when you need
@@ -290,6 +290,14 @@
   </pluginRepositories>  
 
   <build>
+    <extensions>
+      <extension>
+        <groupId>org.apache.maven.wagon</groupId>
+         <artifactId>wagon-ssh</artifactId>
+         <version>2.0</version>
+      </extension>
+    </extensions>
+
     <!-- Some plugins (javadoc for example) can be used in the normal build- and the site phase.
          These plugins inherit their options from the <reporting> section below. These settings
          can be overwritten here. -->
diff --git src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java
index 9ec189b..15480d6 100644
--- src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java
+++ src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java
@@ -131,7 +131,18 @@ public class HBaseConfiguration extends Configuration {
    **/
   public static void merge(Configuration destConf, Configuration srcConf) {
     for (Entry<String, String> e : srcConf) {
-      destConf.set(e.getKey(), e.getValue());
+      // Lily change (only compiles against Hadoop 0.23):
+      // without the isDeprecated check, we see quite some messages logged in LilyClient-using
+      // apps about deprecated properties. These deprecated properties are nowhere explicitly
+      // configured. Rather, Hadoop Configuration internally stores properties both under new
+      // and old names, and then in this situation where we iterate over all of them, we also
+      // get the old names, and would then set these old names in the new config and get the
+      // warning.
+      // (didn't test if this outside of Lily and whether this is only with Cloudera, but would
+      // make sense to do so and report higher up)
+      if (!Configuration.isDeprecated(e.getKey())) {
+        destConf.set(e.getKey(), e.getValue());
+      }
     }
   }
 }
diff --git src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java
index 052637f..f610de6 100644
--- src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java
+++ src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java
@@ -364,6 +364,11 @@ public class HConnectionManager {
       try {
         connection.close();
       } catch (Exception e) {
+        // Lily change
+        if (e instanceof InterruptedException) {
+            Thread.currentThread().interrupt();
+            throw new IOException("Giving up: thread is interrupted.", e);
+        }
         if (connectSucceeded) {
           throw new IOException("The connection to " + connection
               + " could not be deleted.", e);
@@ -666,7 +671,8 @@ public class HConnectionManager {
             this.masterLock.wait(getPauseTime(tries));
           } catch (InterruptedException e) {
             Thread.currentThread().interrupt();
-            throw new RuntimeException("Thread was interrupted while trying to connect to master.");
+            // Lily change: nest interruptedexc so that we can detect it
+            throw new RuntimeException("Thread was interrupted while trying to connect to master.", e);
           }
         }
         this.masterChecked = true;
@@ -1028,8 +1034,9 @@ public class HConnectionManager {
           Thread.sleep(getPauseTime(tries));
         } catch (InterruptedException e) {
           Thread.currentThread().interrupt();
+          // Lily change: nest interruptedexc so that we can detect it
           throw new IOException("Giving up trying to location region in " +
-            "meta: thread is interrupted.");
+            "meta: thread is interrupted.", e);
         }
       }
     }
@@ -1367,6 +1374,10 @@ public class HConnectionManager {
         Throwable t2 = translateException(t);
         if (t2 instanceof IOException) {
           throw (IOException)t2;
+        } else if (t2 instanceof InterruptedException) {
+            // Lily change
+            Thread.currentThread().interrupt();
+            throw new IOException("Giving up trying to get region server: thread is interrupted.", t2);
         } else {
           throw new RuntimeException(t2);
         }
diff --git src/main/java/org/apache/hadoop/hbase/client/HTable.java src/main/java/org/apache/hadoop/hbase/client/HTable.java
index 91abaef..9fc952c 100644
--- src/main/java/org/apache/hadoop/hbase/client/HTable.java
+++ src/main/java/org/apache/hadoop/hbase/client/HTable.java
@@ -724,6 +724,8 @@ public class HTable implements HTableInterface, Closeable {
 
       return results;
     } catch (InterruptedException e) {
+      // Lily change
+      Thread.currentThread().interrupt();
       throw new IOException(e);
     }
   }
@@ -773,6 +775,8 @@ public class HTable implements HTableInterface, Closeable {
     try {
       connection.processBatch((List) deletes, tableName, pool, results);
     } catch (InterruptedException e) {
+      // Lily change
+      Thread.currentThread().interrupt();
       throw new IOException(e);
     } finally {
       // mutate list so that it is empty for complete success, or contains only failed records
@@ -942,6 +946,8 @@ public class HTable implements HTableInterface, Closeable {
       try {
         this.connection.processBatch(writeBuffer, tableName, pool, results);
       } catch (InterruptedException e) {
+        // Lily change
+        Thread.currentThread().interrupt();
         throw new IOException(e);
       } finally {
         // mutate list so that it is empty for complete success, or contains
diff --git src/main/java/org/apache/hadoop/hbase/io/hfile/Compression.java src/main/java/org/apache/hadoop/hbase/io/hfile/Compression.java
index c0de5fc..1caac7b 100644
--- src/main/java/org/apache/hadoop/hbase/io/hfile/Compression.java
+++ src/main/java/org/apache/hadoop/hbase/io/hfile/Compression.java
@@ -188,7 +188,11 @@ public final class Compression {
 
     Algorithm(String name) {
       this.conf = new Configuration();
-      this.conf.setBoolean("hadoop.native.lib", true);
+      if (Configuration.isDeprecated("hadoop.native.lib")) {
+        this.conf.setBoolean("io.native.lib.available", true);
+      } else {
+        this.conf.setBoolean("hadoop.native.lib", true);
+      }
       this.compressName = name;
     }
 
diff --git src/main/java/org/apache/hadoop/hbase/ipc/HBaseClient.java src/main/java/org/apache/hadoop/hbase/ipc/HBaseClient.java
index 0aed5bf..64fe8a1 100644
--- src/main/java/org/apache/hadoop/hbase/ipc/HBaseClient.java
+++ src/main/java/org/apache/hadoop/hbase/ipc/HBaseClient.java
@@ -421,7 +421,11 @@ public class HBaseClient {
       // otherwise back off and retry
       try {
         Thread.sleep(failureSleep);
-      } catch (InterruptedException ignored) {}
+      } catch (InterruptedException ignored) {
+        // Lily change
+        Thread.currentThread().interrupt();
+        throw new IOException("Giving up: thread is interrupted.", ignored);
+      }
 
       LOG.info("Retrying connect to server: " + remoteId.getAddress() +
         " after sleeping " + failureSleep + "ms. Already tried " + curRetries +
@@ -505,6 +509,10 @@ public class HBaseClient {
           receiveResponse();
         }
       } catch (Throwable t) {
+        // Lily change
+        if (t instanceof InterruptedException) {
+            Thread.currentThread().interrupt();
+        }
         LOG.warn("Unexpected exception receiving call responses", t);
         markClosed(new IOException("Unexpected exception receiving call responses", t));
       }
@@ -905,6 +913,12 @@ public class HBaseClient {
         } catch (InterruptedException ignored) {
           // save the fact that we were interrupted
           interrupted = true;
+
+          // Lily change: noticed that often HBase kept hanging on the above call.wait when the
+          // thread was interrupted, even if there was no reason for the call to take a long
+          // time (= hbase & zookeeper running)
+          Thread.currentThread().interrupt();
+          throw new RuntimeException("HBaseClient: interrupted while waiting for call to be done.");
         }
       }
 
@@ -1028,7 +1042,14 @@ public class HBaseClient {
      * refs for keys in HashMap properly. For now its ok.
      */
     ConnectionId remoteId = new ConnectionId(addr, protocol, ticket, rpcTimeout);
+      int attempt = 0;
     do {
+      // Lily change: stop if interrupted. Without this change, this loop would
+      // sometimes be executed tightly many millions times (see while condition).
+      // (this might be a side effect of other interruptions we added)
+      if (Thread.currentThread().isInterrupted()) {
+          throw new InterruptedException("Thread is interrupted.");
+      }
       synchronized (connections) {
         connection = connections.get(remoteId);
         if (connection == null) {
diff --git src/main/java/org/apache/hadoop/hbase/ipc/HBaseRPC.java src/main/java/org/apache/hadoop/hbase/ipc/HBaseRPC.java
index 7eb9e03..023e0bc 100644
--- src/main/java/org/apache/hadoop/hbase/ipc/HBaseRPC.java
+++ src/main/java/org/apache/hadoop/hbase/ipc/HBaseRPC.java
@@ -257,6 +257,9 @@ public class HBaseRPC {
         Thread.sleep(1000);
       } catch (InterruptedException ie) {
         // IGNORE
+        // Lily change
+        Thread.currentThread().interrupt();
+        throw new RuntimeException("Thread interrupted.", ie);
       }
     }
   }
