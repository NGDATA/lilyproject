<?xml version="1.0"?>
<!--
/*
 * Copyright 2013 NGDATA nv
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <!-- This project is basically the same as hadoop-test-fw but adds:
        - a CLI command to start hadoop
        - it has dependencies on lily libs that we want on the classpath of the hbase regionserver
       This is a separate project from hadoop-test-fw to avoid circular dependencies.
  -->
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.lilyproject</groupId>
  <artifactId>lily-hadoop-test-fw-standalone</artifactId>
  <name>Lily: test framework: standalone</name>

  <parent>
    <groupId>org.lilyproject</groupId>
    <artifactId>lily</artifactId>
    <version>2.4.6-SNAPSHOT</version>
    <relativePath>../..</relativePath>
  </parent>

  <dependencies>

    <dependency>
      <groupId>org.lilyproject</groupId>
      <artifactId>lily-hadoop-test-fw</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Dependencies we need to repeat here because otherwise their scope is lost -->
    <dependency>
      <groupId>org.apache.hbase</groupId>
      <artifactId>hbase</artifactId>
      <classifier>tests</classifier>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-test</artifactId>
      <version>${version.hadoop.mr1}</version>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-minicluster</artifactId>
      <version>${version.hadoop.mr1}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- Libraries from Lily that we need on the hbase regionserver classpath -->
    <dependency>
      <groupId>org.lilyproject</groupId>
      <artifactId>lily-repository-impl</artifactId>
    </dependency>

    <dependency>
      <groupId>org.lilyproject</groupId>
      <artifactId>lily-indexer-sep-filter</artifactId>
    </dependency>

    <dependency>
      <groupId>com.ngdata</groupId>
      <artifactId>hbase-sep-impl</artifactId>
    </dependency>

    <dependency>
      <groupId>org.lilyproject</groupId>
      <artifactId>lily-indexer-derefmap-indexfilter</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.lilyproject</groupId>
        <artifactId>lily-genscript-plugin</artifactId>
        <configuration>
          <scripts>
            <script>
              <basename>launch-hadoop</basename>
              <mainClass>org.lilyproject.hadooptestfw.HadoopLauncher</mainClass>
            </script>
          </scripts>
          <beforeJavaHook>
            <parameter>
              <platform>unix</platform>
              <mode>dev</mode>
              <value><![CDATA[
WEBAPPSDIR=${basedir}/target/hadoopwebapps
mkdir -p $WEBAPPSDIR
CWD=`pwd`
cd $WEBAPPSDIR
$JAVA_HOME/bin/jar xf ${settings.localRepository}/org/apache/hadoop/hadoop-core/${version.hadoop.mr1}/hadoop-core-${version.hadoop.mr1}.jar webapps
$JAVA_HOME/bin/jar xf ${settings.localRepository}/org/apache/hadoop/hadoop-hdfs/${version.hadoop}/hadoop-hdfs-${version.hadoop}-tests.jar webapps
$JAVA_HOME/bin/jar xf ${settings.localRepository}/org/apache/hbase/hbase/${version.hbase}/hbase-${version.hbase}.jar hbase-webapps
cd $CWD

# Enable JMX access on the same port as used by HBase's region server
# This is handy because some of our test tools can read out HBase metrics this way
LILY_JMX_OPTIONS="-Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10102"
LILY_OPTIONS="$LILY_JAVA_OPTIONS $LILY_JMX_OPTIONS"

# Add lily-repository-impl & api to classpath
$JAVA_HOME/bin/jar xf ${settings.localRepository}/org/apache/hadoop/hadoop-core/${version.hadoop.mr1}/hadoop-core-${version.hadoop.mr1}.jar webapps

              ]]></value>
            </parameter>
            <parameter>
              <platform>unix</platform>
              <mode>dist</mode>
              <value><![CDATA[
WEBAPPSDIR=$LILY_HOME/tmp/hadoopwebapps
mkdir -p $WEBAPPSDIR
CWD=`pwd`
cd $WEBAPPSDIR
$JAVA_HOME/bin/jar xf $M2_REPO/org/apache/hadoop/hadoop-core/${version.hadoop.mr1}/hadoop-core-${version.hadoop.mr1}.jar webapps
$JAVA_HOME/bin/jar xf $M2_REPO/org/apache/hadoop/hadoop-hdfs/${version.hadoop}/hadoop-hdfs-${version.hadoop}-tests.jar webapps
$JAVA_HOME/bin/jar xf $M2_REPO/org/apache/hbase/hbase/${version.hbase}/hbase-${version.hbase}.jar hbase-webapps
cd $CWD
              ]]></value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dev</mode>
              <value><![CDATA[
set WEBAPPSDIR=${basedir}\target\hadoopwebapps
mkdir %WEBAPPSDIR%
set CWD=%CD%
cd %WEBAPPSDIR%
"%JAVA_HOME%\bin\jar" xf ${settings.localRepository}\org\apache\hadoop\hadoop-core\${version.hadoop.mr1}\hadoop-core-${version.hadoop.mr1}.jar webapps
"%JAVA_HOME%\bin\jar" xf ${settings.localRepository}\org\apache\hadoop\hadoop-hdfs\${version.hadoop}\hadoop-hdfs-${version.hadoop}-tests.jar webapps
"%JAVA_HOME%\bin\jar" xf ${settings.localRepository}\org\apache\hbase\hbase\${version.hbase}\hbase-${version.hbase}.jar hbase-webapps
chdir /d %CWD%
              ]]></value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dist</mode>
              <value><![CDATA[
set WEBAPPSDIR=%LILY_HOME%\tmp\hadoopwebapps
mkdir %WEBAPPSDIR%
set CWD=%CD%
cd %WEBAPPSDIR%
"%JAVA_HOME%\bin\jar" xf %M2_REPO%\org\apache\hadoop\hadoop-core\${version.hadoop.mr1}\hadoop-core-${version.hadoop.mr1}.jar webapps
"%JAVA_HOME%\bin\jar" xf %M2_REPO%\org\apache\hadoop\hadoop-hfds\${version.hadoop}\hadoop-hfds-${version.hadoop}-tests.jar webapps
"%JAVA_HOME%\bin\jar" xf %M2_REPO%\org\apache\hbase\hbase\${version.hbase}\hbase-${version.hbase}.jar hbase-webapps
chdir /d %CWD%
              ]]></value>
            </parameter>
          </beforeJavaHook>
          <classPathPrefix>
            <parameter>
              <platform>unix</platform>
              <mode>dev</mode>
              <value>
                ${basedir}/target/hadoopwebapps:
              </value>
            </parameter>
            <parameter>
              <platform>unix</platform>
              <mode>dist</mode>
              <value>
                $LILY_HOME/tmp/hadoopwebapps:
              </value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dev</mode>
              <value>
                ${basedir}/target/hadoopwebapps;
              </value>
            </parameter>
            <parameter>
              <platform>windows</platform>
              <mode>dist</mode>
              <value>
                %LILY_HOME%/tmp/hadoopwebapps;
              </value>
            </parameter>
          </classPathPrefix>
        </configuration>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>genscript</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
